#ifndef TEXT_H
#define TEXT_H

#include <stdio.h>

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\

enum TextErrors
{
	/// Ошибок нет.
	TEXT_ERR_NO_ERRORS = 0,

	/// Ошибка выделения памяти.
	TEXT_ERR_MEMORY    = 1 << 1,

	/// Ошибка работы с файлом.
	TEXT_ERR_FILE      = 1 << 2
};

/// Структура слова.
struct Word
{
	/// Указатель на строку, содержащую слово.
	/// Строка необязательно заканчивается '\0', главное правильно указать длину слова.
	char* Data;

	/// Длина слова.
	size_t Size;
};

struct Text
{
	/// Размер массива RawData.
	size_t RawDataSize;
	/// Указатель на текст.
	char*  RawData;

	/// Текущий размер массива, то есть текущее количество слов в массиве.
	size_t WordsSize;
	/// Вместительность массива, размер доступной памяти.
	size_t WordsCapacity;
	/// Массив слов.
	Word*  Words;

	/// Состояние структуры.
	int    Status;
};

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\

/**
 * @brief Конструктор текста.
 * 
 * @param text          Указатель на структуру Text.
 * @param wordsCapacity Ожидаемое количество слов в тексте.
 * 
 * @return TextErrors.
*/
int TextConstructor(Text* text, const size_t wordsCapacity);

/**
 * @brief          Прочитать файл.
 *
 * @param text     Указатель на структуру Text.
 * @param fileName Имя файла.
*/
void TextReadFile(Text* text, const char* fileName);

/**
 * @brief Деструктор текста. Очищает всю структуру.
 * 
 * @param text Указатель на структуру Text.
*/
void TextDestructor(Text* text);

/**
 * @brief Очищает массив RawData и связанные с ним поля.
 * 
 * @param text Указатель на структуру Text.
*/
void TextClearRawData(Text* text);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\

/**
 * @brief Разбить текст на слова и сохранить их в Text.Words.
 * 
 * @param text          Указатель на структуру Text.
 * @param maxWordLength Максимальная длина слова, слова большей длины игнорируются.
*/
void TextParseIntoWords(Text* text, const size_t maxWordLength);

/**
 * @brief Прочитать все файлы из директории, разбить прочитанные тексты на слова и
 * сохранить все слова в памяти.
 *
 * @param text            Указатель на структуру Text.
 * @param folderPath      Строка - путь к директории с файлами.
 * @param maximumWordSize Максимальная длина слова, слова большей длины игнорируются.
*/
void TextParseIntoWordsDir(Text* text, const char* folderPath, const size_t maximumWordSize);

/**
 * @brief Посчитать количество слов в тексте.
 *
 * @param text          Указатель на структуру Text.
 * @param maxWordLength Максимальная длина слова, слова большей длины игнорируются.
 *
 * @return Количество слов в тексте.
*/
size_t TextCountWords(const Text* text, const size_t maxWordLength);

///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\
///***///***///---\\\***\\\***\\\___///***___***\\\___///***///***///---\\\***\\\***\\\

#endif
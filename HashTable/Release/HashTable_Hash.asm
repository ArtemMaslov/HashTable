; Listing generated by Microsoft (R) Optimizing Compiler Version 19.31.31105.0 

	TITLE	D:\Language C\HashTable\HashTable\Release\HashTable_Hash.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?CalcHash@@YAIPBUHashTable@@PBT__m128i@@@Z	; CalcHash
PUBLIC	?HashTable_HashConstant@@YAIPBT__m128i@@@Z	; HashTable_HashConstant
PUBLIC	?HashTable_HashLetter@@YAIPBT__m128i@@@Z	; HashTable_HashLetter
PUBLIC	?HashTable_HashLength@@YAIPBT__m128i@@@Z	; HashTable_HashLength
PUBLIC	?HashTable_HashCharSum@@YAIPBT__m128i@@@Z	; HashTable_HashCharSum
PUBLIC	?HashTable_HashRor@@YAIPBT__m128i@@@Z		; HashTable_HashRor
PUBLIC	?HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z	; HashTable_HashCRC32_C
PUBLIC	?HashTable_HashCRC32_Intrin_32@@YAIPBT__m128i@@@Z ; HashTable_HashCRC32_Intrin_32
EXTRN	__imp__strnlen:PROC
;	COMDAT ?inited@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4_NA
_BSS	SEGMENT
?inited@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4_NA DB 01H DUP (?) ; `HashTable_HashCRC32_C'::`2'::inited
_BSS	ENDS
;	COMDAT ?crc_table@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4PAIA
_BSS	SEGMENT
?crc_table@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4PAIA DD 0100H DUP (?) ; `HashTable_HashCRC32_C'::`2'::crc_table
_BSS	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashCRC32_Intrin_32@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashCRC32_Intrin_32@@YAIPBT__m128i@@@Z PROC	; HashTable_HashCRC32_Intrin_32, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp

; 111  : 	assert(element);
; 112  : 
; 113  : 	uint32_t crc = 0;
; 114  : 	crc = _mm_crc32_u32(crc, ((uint32_t*)element)[0]);

	mov	ecx, DWORD PTR _element$[ebp]
	xor	eax, eax
	crc32	eax, DWORD PTR [ecx]

; 115  : 
; 116  : 	crc = _mm_crc32_u32(crc, ((uint32_t*)element)[1]);

	crc32	eax, DWORD PTR [ecx+4]

; 117  : 
; 118  : 	crc = _mm_crc32_u32(crc, ((uint32_t*)element)[2]);

	crc32	eax, DWORD PTR [ecx+8]

; 119  : 
; 120  : 	return _mm_crc32_u32(crc, ((uint32_t*)element)[3]);

	crc32	eax, DWORD PTR [ecx+12]

; 121  : }

	pop	ebp
	ret	0
?HashTable_HashCRC32_Intrin_32@@YAIPBT__m128i@@@Z ENDP	; HashTable_HashCRC32_Intrin_32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z PROC		; HashTable_HashCRC32_C, COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp

; 79   : 	assert(element);
; 80   : 
; 81   : 	static bool   inited         = false;
; 82   : 	static size_t crc_table[256] = { 0 };
; 83   : 
; 84   : 	size_t hash = 0;
; 85   : 
; 86   : 	if (!inited)

	cmp	BYTE PTR ?inited@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4_NA, 0
	push	esi
	jne	$LN3@HashTable_

; 87   : 	{
; 88   : 		inited = true;

	mov	BYTE PTR ?inited@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4_NA, 1
	xor	esi, esi
	npad	6
$LL4@HashTable_:

; 89   : 		for (int i = 0; i < 256; i++)
; 90   : 		{
; 91   : 			hash = i;
; 92   : 			for (int j = 0; j < 8; j++)
; 93   : 				hash = hash & 1 ? (hash >> 1) ^ 0xEDB88320UL : hash >> 1;

	mov	ecx, esi
	mov	eax, esi
	shr	ecx, 1
	mov	edx, ecx
	xor	edx, -306674912				; edb88320H
	test	al, 1
	cmove	edx, ecx
	mov	eax, edx
	shr	eax, 1
	mov	ecx, eax
	xor	ecx, -306674912				; edb88320H
	test	dl, 1
	cmove	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	edx, eax
	xor	edx, -306674912				; edb88320H
	test	cl, 1
	cmove	edx, eax
	mov	eax, edx
	shr	eax, 1
	mov	ecx, eax
	xor	ecx, -306674912				; edb88320H
	test	dl, 1
	cmove	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	edx, eax
	xor	edx, -306674912				; edb88320H
	test	cl, 1
	cmove	edx, eax
	mov	eax, edx
	shr	eax, 1
	mov	ecx, eax
	xor	ecx, -306674912				; edb88320H
	test	dl, 1
	cmove	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	edx, eax
	xor	edx, -306674912				; edb88320H
	test	cl, 1
	cmove	edx, eax
	mov	ecx, edx
	shr	ecx, 1
	mov	eax, ecx
	xor	eax, -306674912				; edb88320H
	test	dl, 1
	cmove	eax, ecx

; 94   : 
; 95   : 			crc_table[i] = hash;

	mov	DWORD PTR ?crc_table@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4PAIA[esi*4], eax
	inc	esi
	cmp	esi, 256				; 00000100H
	jl	$LL4@HashTable_
$LN3@HashTable_:

; 96   : 		};
; 97   : 	}
; 98   : 
; 99   : 	hash = 0xFFFFFFFFUL;
; 100  : 
; 101  : 	const char*  data = (char*)element;
; 102  : 
; 103  : 	for (size_t st = 0; data[st] && st < MaximumWordSize; st++)

	mov	esi, DWORD PTR _element$[ebp]
	xor	edx, edx
	or	eax, -1
	cmp	BYTE PTR [esi], dl
	je	SHORT $LN51@HashTable_
$LL10@HashTable_:
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN51@HashTable_

; 104  : 		hash = crc_table[(hash ^ data[st]) & 0xFF] ^ (hash >> 8);

	movsx	ecx, BYTE PTR [edx+esi]
	inc	edx
	xor	ecx, eax
	shr	eax, 8
	movzx	ecx, cl
	xor	eax, DWORD PTR ?crc_table@?1??HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z@4PAIA[ecx*4]
	cmp	BYTE PTR [edx+esi], 0
	jne	SHORT $LL10@HashTable_
$LN51@HashTable_:

; 105  : 
; 106  : 	return (hash ^ 0xFFFFFFFFUL);

	not	eax
	pop	esi

; 107  : }

	pop	ebp
	ret	0
?HashTable_HashCRC32_C@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashCRC32_C
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashRor@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashRor@@YAIPBT__m128i@@@Z PROC		; HashTable_HashRor, COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 61   : 	assert(element);
; 62   : 
; 63   : 	const char*  data = (char*)element;
; 64   : 
; 65   : 	size_t hash = (unsigned char)data[0];

	mov	esi, DWORD PTR _element$[ebp]

; 66   : 
; 67   : 	for (size_t st = 1; data[st] && st < MaximumWordSize; st++)

	mov	edx, 1
	cmp	BYTE PTR [esi+1], 0
	movzx	eax, BYTE PTR [esi]
	je	SHORT $LN3@HashTable_
$LL4@HashTable_:
	cmp	edx, 16					; 00000010H
	jae	SHORT $LN3@HashTable_

; 68   : 	{
; 69   : 		hash = ((hash & 1) << (8 * sizeof(size_t) - 1)) | (hash >> 1);
; 70   : 
; 71   : 		hash ^= (unsigned char)data[st];

	movzx	ecx, BYTE PTR [edx+esi]
	inc	edx
	ror	eax, 1
	xor	eax, ecx
	cmp	BYTE PTR [edx+esi], 0
	jne	SHORT $LL4@HashTable_
$LN3@HashTable_:
	pop	esi

; 72   : 	}
; 73   : 
; 74   : 	return hash;
; 75   : }

	pop	ebp
	ret	0
?HashTable_HashRor@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashRor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashCharSum@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashCharSum@@YAIPBT__m128i@@@Z PROC		; HashTable_HashCharSum, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 47   : 	assert(element);
; 48   : 
; 49   : 	const char*  data = (char*)element;
; 50   : 
; 51   : 	size_t hash = 0;
; 52   : 
; 53   : 	for (size_t st = 0; data[st] && st < MaximumWordSize; st++)

	mov	esi, DWORD PTR _element$[ebp]
	xor	eax, eax
	xor	ecx, ecx
	cmp	BYTE PTR [esi], al
	je	SHORT $LN3@HashTable_
	npad	1
$LL4@HashTable_:
	cmp	ecx, 16					; 00000010H
	jae	SHORT $LN3@HashTable_

; 54   : 		hash += data[st];

	movsx	edx, BYTE PTR [ecx+esi]
	inc	ecx
	add	eax, edx
	cmp	BYTE PTR [ecx+esi], 0
	jne	SHORT $LL4@HashTable_
$LN3@HashTable_:
	pop	esi

; 55   : 
; 56   : 	return hash;
; 57   : }

	pop	ebp
	ret	0
?HashTable_HashCharSum@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashCharSum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashLength@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashLength@@YAIPBT__m128i@@@Z PROC		; HashTable_HashLength, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp

; 40   : 	assert(element);
; 41   : 
; 42   : 	return strnlen((char*)element, MaximumWordSize);

	push	16					; 00000010H
	push	DWORD PTR _element$[ebp]
	call	DWORD PTR __imp__strnlen
	add	esp, 8

; 43   : }

	pop	ebp
	ret	0
?HashTable_HashLength@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashLength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashLetter@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashLetter@@YAIPBT__m128i@@@Z PROC		; HashTable_HashLetter, COMDAT

; 32   : {

	push	ebp
	mov	ebp, esp

; 33   : 	assert(element);
; 34   : 
; 35   : 	return ((char*)element)[0];

	mov	eax, DWORD PTR _element$[ebp]
	movsx	eax, BYTE PTR [eax]

; 36   : }

	pop	ebp
	ret	0
?HashTable_HashLetter@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashLetter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?HashTable_HashConstant@@YAIPBT__m128i@@@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
?HashTable_HashConstant@@YAIPBT__m128i@@@Z PROC		; HashTable_HashConstant, COMDAT

; 26   : 	assert(element);
; 27   : 
; 28   : 	return 1;

	mov	eax, 1

; 29   : }

	ret	0
?HashTable_HashConstant@@YAIPBT__m128i@@@Z ENDP		; HashTable_HashConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File D:\Language C\HashTable\HashTable\HashTable\HashTable_Hash.cpp
;	COMDAT ?CalcHash@@YAIPBUHashTable@@PBT__m128i@@@Z
_TEXT	SEGMENT
_table$ = 8						; size = 4
_element$ = 12						; size = 4
?CalcHash@@YAIPBUHashTable@@PBT__m128i@@@Z PROC		; CalcHash, COMDAT

; 17   : {

	push	ebp
	mov	ebp, esp
	push	esi

; 18   : 	assert(table);
; 19   : 	assert(element);
; 20   : 
; 21   : 	return table->HashFunction(element) % table->ListCount;

	mov	esi, DWORD PTR _table$[ebp]
	push	DWORD PTR _element$[ebp]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 4
	xor	edx, edx
	div	DWORD PTR [esi+4]
	pop	esi
	mov	eax, edx

; 22   : }

	pop	ebp
	ret	0
?CalcHash@@YAIPBUHashTable@@PBT__m128i@@@Z ENDP		; CalcHash
_TEXT	ENDS
END
